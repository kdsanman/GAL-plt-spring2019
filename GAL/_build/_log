### Starting build.
# Target: gal.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:gal.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules gal.ml > gal.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o ast.cmo ast.ml
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:sast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o sast.cmo sast.ml
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:semant.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o codegen.cmo codegen.ml
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o semant.cmo semant.ml
# Target: gal.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:gal.cmo, file:gal.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o gal.cmo gal.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o ast.cmx ast.ml
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o sast.cmx sast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -package llvm.bitreader -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o codegen.cmx codegen.ml
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o semant.cmx semant.ml
# Target: gal.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), compile, extension:cmx, extension:ml, file:gal.cmx, file:gal.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-3 -w +a-4 -package llvm -package llvm.analysis -package llvm.bitreader -o gal.cmx gal.ml
# Target: gal.native, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), warn(+a-4), dont_link_with, extension:native, file:gal.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis -package llvm.bitreader ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx gal.cmx -o gal.native
# Compilation successful.
